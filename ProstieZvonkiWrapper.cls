VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ProstieZvonkiWrapper"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

Public WithEvents prostie_zvonki_lib As CTIControlX
Attribute prostie_zvonki_lib.VB_VarHelpID = -1

Const guidKey = "HKEY_CURRENT_USER\Software\Vedisoft\Access\GUID"
Const serverKey = "HKEY_CURRENT_USER\Software\Vedisoft\Access\ServerAddress"
Const passwordKey = "HKEY_CURRENT_USER\Software\Vedisoft\Access\ClientID"
Const phoneKey = "HKEY_CURRENT_USER\Software\Vedisoft\Access\Phone"

Public State As Boolean

Dim logPath As String
Dim ManagerPhone As String
Dim server As String
Dim password As String
Dim GUID As String

Public Sub LoadSettings()
    'add unique client guid to registry
    If (RegKeyExists(guidKey)) Then
        GUID = RegKeyRead(guidKey)
    Else
        GUID = GenGuid()
        Call RegKeySave(guidKey, GUID)
    End If
    
    If (RegKeyExists(serverKey)) Then
        server = RegKeyRead(serverKey)
    Else
        server = "127.0.0.1:10150"
    End If
    
    If (RegKeyExists(passwordKey)) Then
        password = RegKeyRead(passwordKey)
    Else
        password = ""
    End If
    
    If (RegKeyExists(phoneKey)) Then
        ManagerPhone = RegKeyRead(phoneKey)
    Else
        ManagerPhone = ""
    End If
End Sub

Public Sub SaveSettings()
    On Error GoTo ErrorHandler
    Call RegKeySave(phoneKey, ManagerPhone)
    Call RegKeySave(serverKey, server)
    Call RegKeySave(passwordKey, password)
    Exit Sub
ErrorHandler:
    ShowError Err
    Resume Next
End Sub

Public Function SetConnectionSettings(server_string As String, password_string As String)
    server = server_string
    password = password_string
    SaveSettings
End Function

Public Sub SetManagerPhone(phone As String)
    ManagerPhone = phone
    SaveSettings
    Disconnect
    Connect
End Sub

Public Function GetServer()
    GetServer = server
End Function

Public Function GetPassword()
    GetPassword = password
End Function

Public Function GetManagerPhone()
    GetManagerPhone = ManagerPhone
End Function

Public Sub Class_Initialize()
    On Error GoTo ErrorHandler
    CreateLogDir
    
    LoadSettings
    
    Set prostie_zvonki_lib = New CTIControlX
    Exit Sub
ErrorHandler:
    ShowError Err
    Resume Next
End Sub

Sub CreateLogDir()
    logPath = Environ("LocalAppData") & "\Vedisoft"
    If Not FolderExists(logPath) Then
        MkDir logPath
    End If
    logPath = logPath + "\Access\"
    If Not FolderExists(logPath) Then
        MkDir logPath
    End If
    Exit Sub
End Sub

Sub ShowError(error As ErrObject)
    Dim Msg As String
    Msg = "Error was generated by " _
         & error.Source & Chr(13) & error.Description
    MsgBox Msg, , "Error", error.HelpFile, error.HelpContext
End Sub

Function FolderExists(ByVal strPath As String) As Boolean
    On Error Resume Next
    FolderExists = ((GetAttr(strPath) And vbDirectory) = vbDirectory)
End Function

Public Sub Connect()
    If (State) Then
        prostie_zvonki_lib.Disconnect
        State = False
    End If

    Dim ret As Integer
    On Error GoTo Errhandler
    prostie_zvonki_lib.phoneNumber = ManagerPhone
    ret = prostie_zvonki_lib.Connect(server, password, "Access", GUID, _
                                            logPath & "ProtocolLib_log.log", 0, 5000)
    If (ret = 0) Then
        State = True
    Else
        State = False
        MsgBox ("Can't connect to server")
    End If
    Exit Sub
Errhandler:
    ShowError Err
    Resume Next
End Sub

Public Function GetConnectionState()
    GetConnectionState = (prostie_zvonki_lib.connectionState = 1)
    
End Function

Public Sub Disconnect()
    Call prostie_zvonki_lib.Disconnect
    State = False
End Sub

Public Sub Class_Terminate()
    If Not IsNull(prostie_zvonki_lib) Then
        Call prostie_zvonki_lib.Disconnect
    End If
End Sub

Public Sub MakeCall(phone As String)
    Call prostie_zvonki_lib.Call(ManagerPhone, phone)
End Sub

Function GenGuid() As String
    Dim TypeLib As Object
    Dim GUID As String
    Set TypeLib = CreateObject("Scriptlet.TypeLib")
    GUID = TypeLib.GUID
    ' format is {24DD18D4-C902-497F-A64B-28B2FA741661}
    GUID = Replace(GUID, "{", "")
    GUID = Replace(GUID, "}", "")
    GenGuid = GUID
End Function


Function RegKeyRead(i_RegKey As String) As String
    Dim myWS As Object
    On Error Resume Next
    Set myWS = CreateObject("WScript.Shell")
    RegKeyRead = myWS.RegRead(i_RegKey)
End Function

Function RegKeyExists(i_RegKey As String) As Boolean
    Dim myWS As Object
    On Error GoTo ErrorHandler
    Set myWS = CreateObject("WScript.Shell")
    myWS.RegRead i_RegKey
    RegKeyExists = True
    Exit Function
ErrorHandler:
    RegKeyExists = False
End Function

Sub RegKeySave(i_RegKey As String, _
               i_Value As String, _
      Optional i_Type As String = "REG_SZ")
    Dim myWS As Object
    Set myWS = CreateObject("WScript.Shell")
    myWS.RegWrite i_RegKey, i_Value, i_Type
End Sub

Private Sub prostie_zvonki_lib_OnTransferredCall(ByVal CallID As String, _
                                                ByVal src As String, ByVal dst As String,ByVal line As String)
    On Error GoTo ErrorHandler
    
    If (dst <> ManagerPhone) Then
        Exit Sub
    End If
    Dim clientName As String
    clientName = FindClientByPhone(src)
    If clientName = "" Then
        'can't find client, show number only
        MsgBox ("Incoming call from " & src)
    Else
        'show client name
        MsgBox ("Incoming call from " & clientName)
    End If
    Exit Sub
ErrorHandler:
    ShowError Err
    Resume Next
End Sub

Private Function FindClientByPhone(phone As String) As String
    Dim rs As Recordset
    Dim strSQL As String
    strSQL = "SELECT [Èìÿ], [Ôàìèëèÿ] FROM Êîíòàêòû" & _
            " WHERE Êîíòàêòû.[Ðàáî÷èé òåëåôîí] = '" & phone & "'"
    Set rs = CurrentDb.OpenRecordset(strSQL)
    If rs.RecordCount >= 1 Then
        FindClientByPhone = rs.Fields(0).Value & " " & rs.Fields(1).Value
    Else
        FindClientByPhone = ""
    End If
    Call rs.Close
End Function

Private Sub prostie_zvonki_lib_OnTransferRequest(ByVal CallID As String, ByVal from As String,ByVal line As String)
    On Error GoTo ErrorHandler
    Dim rs As Recordset
    Dim strSQL As String
    strSQL = "SELECT Ìåíåäæåðû.[Òåëåôîí] FROM Ìåíåäæåðû" & _
            " INNER JOIN Êîíòàêòû ON Ìåíåäæåðû.[Êîä] = Êîíòàêòû.[Ìåíåäæåð]" & _
            " WHERE Êîíòàêòû.[Ðàáî÷èé òåëåôîí] = '" & from & "'"
    Set rs = CurrentDb.OpenRecordset(strSQL)
    If rs.RecordCount >= 1 Then
        'call with number, if manager can handle call
        Call prostie_zvonki_lib.Transfer(CallID, rs.Fields(0).Value)
    Else
        'call with empty string, if manager can't handle call
        Call prostie_zvonki_lib.Transfer(CallID, "")
    End If
    Call rs.Close
    Exit Sub
ErrorHandler:
    ShowError Err
    Resume Next
End Sub

Private Sub prostie_zvonki_lib_OnConnectionState(ByVal con_state As Long)
    On Error GoTo ErrorHandler
    Select Case con_state
        Case 1
            State = True
        Case Else
            State = False
    End Select
    If (Forms.Count > 0) Then
        If (Not (Forms("Íàñòðîéêè") Is Nothing)) Then
            Forms("Íàñòðîéêè").UpdateState (State)
        End If
    End If
    Exit Sub
ErrorHandler:
    ShowError Err
    Resume Next
End Sub

Private Sub prostie_zvonki_lib_OnCompletedCall(ByVal CallID As String, ByVal src As String, ByVal dst As String, ByVal duration As Long, ByVal startTimestampString As String, ByVal endTimestampString As String, ByVal direction As Long, ByVal record As String,ByVal line As String)
    On Error GoTo ErrorHandler
    Dim manager As String, client As String
    If (direction = 1) Then
        client = dst
        manager = src
    Else
        client = src
        manager = dst
    End If
    startTimestampString = prostie_zvonki_lib.ConvertUtcToLocal(startTimestampString)
    endTimestampString = prostie_zvonki_lib.ConvertUtcToLocal(endTimestampString)
    Dim startTime, endTime
    startTime = DateAdd("s", CLng(startTimestampString), DateSerial(1970, 1, 1))
    endTime = DateAdd("s", CLng(endTimestampString), DateSerial(1970, 1, 1))
    Dim clientName As String
    clientName = FindClientByPhone(client)
    MsgBox ("Çâîíîê çàâåðøåí" & Chr(13) & "Òåëåôîí ìåíåäæåðà: " & manager & Chr(13) & "Êëèåíò: " & clientName & Chr(13) & "Êëèåíò(òåëåôîí): " & client & Chr(13) & "Íà÷àëî çâîíêà: " & startTime & Chr(13) & "Êîíåö çâîíêà: " & endTime & Chr(13) & "Ïðîäîëæèòåëüíîñòü: " & duration / 1000 & " ñåêóíä")
    Exit Sub
ErrorHandler:
    ShowError Err
    Resume Next
End Sub

